{"version":3,"sources":["enums/index.ts","appsettings.js","components/stage/stagecontrols.tsx","components/stage/itemcontainer.tsx","helpers/sorting/sortinghelper.ts","helpers/sorting/quicksortengine.ts","helpers/sorting/mergesortengine.ts","helpers/sorting/bubblesortengine.ts","helpers/sorting/sortingengine.ts","components/stage/stage.tsx","App.tsx","index.tsx"],"names":["Algorithms","settings","itemWidth","default","min","max","sortingSpeed","itemColor","sorted","current","StageControls","props","itemWidthRangeOptions","speedRangeOptions","getNavItem","text","algorithm","className","classNames","active","selectedAlgorithm","disable","sortingInProgress","onClick","onAlgorithmSelected","href","data-id","resetArray","disabled","type","defaultValue","onChange","onItemWidthChange","enums","BubbleSort","QuickSort","MergeSort","startSorting","onSortingSpeedChange","ItemContainer","maxHeight","items","map","item","index","style","marginTop","width","key","data-index","renderItem","SortingHelper","generateRandomArray","length","Array","from","Math","floor","random","getItemWidth","sizeIndex","itemSize","Error","getSortingSpeed","sleep","milliseconds","Promise","resolve","setTimeout","swap","array","index1","index2","temp","animate","element","x","transform","ontransitionend","getSortableUIItems","document","getElementsByClassName","getElementsByTagName","QuickSortEngine","options","sort","a","high","quickSort","low","partition","partitionIndex","setAsSorted","pivot","value","start","end","swapInUI","backgroundColor","appsettings","item1","item2","toMove","abs","totalTranlation","to","sortedColor","slice","forEach","this","MergeSortEngine","mergeSort","mid","merge","i","j","k","newArray","filteredArray","filter","isLastMerge","color","previousIndex","totalMovement","BubbleSortEngine","n","SortingEngine","arrayToSort","mapArrayWithDOMElements","mappedArray","engine","Stage","state","rawArray","itemCount","stageWidth","stageHeight","sortingAlgorithm","resetDone","e","sortingEngine","setState","console","error","setStateToRemoveItems","reset","removeItems","target","parseInt","setItemWidth","renderedOn","Date","now","weight","setSortingSpeed","setTransitionForSortableItems","sortableItems","speed","transition","React","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f54dc61e.chunk.js","sourcesContent":["/**\r\n * Enums for different algorithms\r\n */\r\nexport enum Algorithms {\r\n  BubbleSort = 1,\r\n  QuickSort = 2,\r\n  MergeSort = 3,\r\n}\r\n","var settings = {\r\n  itemWidth: {\r\n    // default, min and max are index of [2, 4, 5, 10, 20, 40, 50] '\r\n    // which are item width in pixel\r\n    default: 4,\r\n    min: 1,\r\n    max: 7,\r\n  },\r\n  sortingSpeed: {\r\n    default: 7,\r\n    min: 1,\r\n    max: 10,\r\n  },\r\n  itemColor: {\r\n    default: \"#01d0df\",\r\n    sorted: \"#7bd475\",\r\n    current: \"#f73838\",\r\n  },\r\n};\r\n\r\nexport default settings;\r\n","import React from \"react\";\r\nimport * as enums from \"../../enums\";\r\nimport settings from \"../../appsettings\";\r\nimport { RangeOptions } from \"./typings/rangeoptions\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface Props {\r\n  selectedAlgorithm: enums.Algorithms;\r\n  sortingInProgress: boolean;\r\n  resetArray: (event: React.MouseEvent<HTMLElement>) => void;\r\n  startSorting: (event: React.MouseEvent<HTMLElement>) => void;\r\n  onItemWidthChange: (event: React.ChangeEvent<HTMLElement>) => void;\r\n  onSortingSpeedChange: (event: React.ChangeEvent<HTMLElement>) => void;\r\n  onAlgorithmSelected: (algorithm: enums.Algorithms) => void;\r\n}\r\n\r\nconst StageControls: React.SFC<Props> = (props) => {\r\n  // options for item width range selector\r\n  const itemWidthRangeOptions: RangeOptions = {\r\n    default: settings.itemWidth.default,\r\n    min: settings.itemWidth.min,\r\n    max: settings.itemWidth.max,\r\n  };\r\n\r\n  // options for sorting speed range selector\r\n  const speedRangeOptions: RangeOptions = {\r\n    default: settings.sortingSpeed.default,\r\n    min: settings.sortingSpeed.min,\r\n    max: settings.sortingSpeed.max,\r\n  };\r\n\r\n  // generate nav item\r\n  const getNavItem = (text: string, algorithm: enums.Algorithms) => {\r\n    return (\r\n      <li\r\n        className={classNames({\r\n          active: props.selectedAlgorithm === algorithm,\r\n          disable: props.sortingInProgress,\r\n        })}\r\n      >\r\n        <a\r\n          onClick={() => props.onAlgorithmSelected(algorithm)}\r\n          href=\"#\"\r\n          data-id={algorithm}\r\n        >\r\n          {text}\r\n        </a>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-inverse\">\r\n      <div className=\"container-fluid\">\r\n        <ul className=\"nav navbar-nav\">\r\n          <li>\r\n            <button\r\n              className=\"btn btn-primary navbar-btn right-margin16px\"\r\n              onClick={props.resetArray}\r\n              disabled={props.sortingInProgress}\r\n            >\r\n              Reset\r\n            </button>\r\n          </li>\r\n          <li className=\"range\">\r\n            <p>item width</p>\r\n            <input\r\n              type=\"range\"\r\n              min={itemWidthRangeOptions.min}\r\n              max={itemWidthRangeOptions.max}\r\n              defaultValue={itemWidthRangeOptions.default}\r\n              onChange={props.onItemWidthChange}\r\n              disabled={props.sortingInProgress}\r\n            />\r\n          </li>\r\n        </ul>\r\n        <ul className=\"nav navbar-nav\">\r\n          {getNavItem(\"Bubble sort\", enums.Algorithms.BubbleSort)}\r\n          {getNavItem(\"Quick sort\", enums.Algorithms.QuickSort)}\r\n          {getNavItem(\"Merge sort\", enums.Algorithms.MergeSort)}\r\n        </ul>\r\n        <ul className=\"nav navbar-nav\">\r\n          <li>\r\n            <button\r\n              onClick={props.startSorting}\r\n              className=\"btn btn-success navbar-btn right-margin16px left-margin16px\"\r\n              disabled={props.sortingInProgress}\r\n            >\r\n              Start\r\n            </button>\r\n          </li>\r\n          <li className=\"range\">\r\n            <p>Sorting speed</p>\r\n            <input\r\n              type=\"range\"\r\n              min={speedRangeOptions.min}\r\n              max={speedRangeOptions.max}\r\n              defaultValue={speedRangeOptions.default}\r\n              onChange={props.onSortingSpeedChange}\r\n            />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default StageControls;\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  items: number[];\r\n  maxHeight: number;\r\n  itemWidth: number;\r\n}\r\n\r\nconst ItemContainer: React.SFC<Props> = (props) => {\r\n  const { maxHeight, items, itemWidth } = props;\r\n\r\n  /** render each sortable item */\r\n  const renderItem = (item: number, index: number) => {\r\n    let style: React.CSSProperties = {\r\n      marginTop: maxHeight - item,\r\n      width: itemWidth,\r\n    };\r\n    return <div style={style} key={index} data-index={index}></div>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"item-container\">\r\n      {items.map((item: number, index: number) => {\r\n        return renderItem(item, index);\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemContainer;\r\n","class SortingHelper {\r\n  /**\r\n   * generate random array based on the length\r\n   */\r\n  public static generateRandomArray = (\r\n    length: number,\r\n    min: number,\r\n    max: number\r\n  ) => {\r\n    return Array.from(\r\n      {\r\n        length: length,\r\n      },\r\n      () => min + Math.floor(Math.random() * (max - min + 1))\r\n    );\r\n  };\r\n\r\n  /**\r\n   * return item width in pixel\r\n   */\r\n  public static getItemWidth = (sizeIndex: number): number => {\r\n    // width of each item will be the value + 1px margin\r\n    // example if width is 3 then item width will be 49 + 1 = 4\r\n    let itemSize = [1, 3, 4, 9, 19, 39, 49];\r\n    if (sizeIndex > itemSize.length) {\r\n      throw Error(\"Size index not valid for item width\");\r\n    }\r\n\r\n    return itemSize[sizeIndex - 1];\r\n  };\r\n\r\n  /**\r\n   * return sorting speed\r\n   */\r\n  public static getSortingSpeed = (index: number) => {\r\n    let speed = [250, 200, 150, 100, 75, 50, 35, 25, 10, 1];\r\n    return speed[index - 1];\r\n  };\r\n\r\n  /**\r\n   * sleep for the specified amount of time\r\n   */\r\n  public static sleep = (milliseconds: number) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n\r\n  /**\r\n   * swap items between index in an array\r\n   */\r\n  public static swap = (array: any, index1: number, index2: number) => {\r\n    let temp = array[index1];\r\n    array[index1] = array[index2];\r\n    array[index2] = temp;\r\n  };\r\n\r\n  /**\r\n   * animate element using translateX\r\n   */\r\n  public static animate = (element: HTMLElement, x: number) => {\r\n    new Promise((resolve) => {\r\n      element.style.transform = `translateX(${x}px)`;\r\n      element.ontransitionend = () => {\r\n        resolve();\r\n      };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * return sortable items in UI\r\n   */\r\n  public static getSortableUIItems = () => {\r\n    let itemContainer = document.getElementsByClassName(\"item-container\")[0];\r\n    let items = itemContainer.getElementsByTagName(\"div\");\r\n\r\n    return items;\r\n  };\r\n}\r\n\r\nexport default SortingHelper;\r\n","import ISortEngine from \"./isortengine\";\r\nimport appsettings from \"../../appsettings\";\r\nimport SortingHelper from \"./sortinghelper\";\r\nimport ItemElementMap from \"./typings/itemelementmap\";\r\nimport SortOptions from \"../../components/stage/typings/sortoptions\";\r\n\r\nclass QuickSortEngine implements ISortEngine {\r\n  // array to sort\r\n  private array: ItemElementMap[];\r\n\r\n  // sort options\r\n  private options: SortOptions;\r\n\r\n  /**\r\n   * constructor of quick sort engine\r\n   */\r\n  constructor(array: ItemElementMap[], options: SortOptions) {\r\n    this.array = array;\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * sort and visualize the array sorting\r\n   */\r\n  public sort = async () => {\r\n    let low = 0;\r\n    let high = this.array.length - 1;\r\n    await this.quickSort(this.array, low, high);\r\n  };\r\n\r\n  /**\r\n   * perform quick sort\r\n   */\r\n  private quickSort = async (\r\n    array: ItemElementMap[],\r\n    low: number,\r\n    high: number\r\n  ) => {\r\n    if (low < high) {\r\n      let partitionIndex = await this.partition(array, low, high);\r\n      await this.quickSort(array, low, partitionIndex - 1);\r\n      this.setAsSorted(array, low, partitionIndex);\r\n\r\n      await this.quickSort(array, partitionIndex + 1, high);\r\n      this.setAsSorted(array, partitionIndex, high);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * partiotion the array for quick sort\r\n   */\r\n  private partition = async (\r\n    array: ItemElementMap[],\r\n    low: number,\r\n    high: number\r\n  ) => {\r\n    let pivot = array[low].value;\r\n    let start = low;\r\n    let end = high;\r\n\r\n    while (start < end) {\r\n      while (array[start].value <= pivot && start < end) {\r\n        start++;\r\n      }\r\n\r\n      while (array[end].value > pivot) {\r\n        end--;\r\n      }\r\n\r\n      if (start < end) {\r\n        await SortingHelper.sleep(this.options.getSortingSpeed());\r\n        // swap items in UI\r\n        await this.swapInUI(array, start, end);\r\n        // swap start element with end\r\n        SortingHelper.swap(array, start, end);\r\n      }\r\n    }\r\n\r\n    await SortingHelper.sleep(this.options.getSortingSpeed());\r\n\r\n    // swap items in UI\r\n    await this.swapInUI(array, low, end);\r\n    // swap pivot with end\r\n    SortingHelper.swap(array, low, end);\r\n\r\n    array[end].element.style.backgroundColor = appsettings.itemColor.sorted;\r\n\r\n    return end;\r\n  };\r\n\r\n  /**\r\n   * Swap items in UI\r\n   */\r\n  private swapInUI = async (\r\n    array: ItemElementMap[],\r\n    index1: number,\r\n    index2: number\r\n  ) => {\r\n    let item1 = array[index1];\r\n    let item2 = array[index2];\r\n\r\n    let toMove = Math.abs(index1 - index2) * (this.options.itemWidth + 1);\r\n\r\n    item1.totalTranlation += toMove;\r\n    item2.totalTranlation -= toMove;\r\n\r\n    await SortingHelper.animate(item1.element, item1.totalTranlation);\r\n    await SortingHelper.animate(item2.element, item2.totalTranlation);\r\n\r\n    await SortingHelper.sleep(this.options.getSortingSpeed());\r\n  };\r\n\r\n  /**\r\n   * set specified from - to index as sorted\r\n   */\r\n  private setAsSorted = (array: ItemElementMap[], from: number, to: number) => {\r\n    let sortedColor = appsettings.itemColor.sorted;\r\n    let sortedItems = array.slice(from, to + 1);\r\n    sortedItems.forEach((item: ItemElementMap) => {\r\n      item.element.style.backgroundColor = sortedColor;\r\n    });\r\n  };\r\n}\r\n\r\nexport default QuickSortEngine;\r\n","import ISortEngine from \"./isortengine\";\r\nimport appsettings from \"../../appsettings\";\r\nimport SortingHelper from \"./sortinghelper\";\r\nimport ItemElementMap from \"./typings/itemelementmap\";\r\nimport SortOptions from \"../../components/stage/typings/sortoptions\";\r\n\r\nclass MergeSortEngine implements ISortEngine {\r\n  // array to sort\r\n  private array: ItemElementMap[];\r\n\r\n  // sort options\r\n  private options: SortOptions;\r\n\r\n  /**\r\n   * constructor of merge sort engine\r\n   */\r\n  constructor(array: ItemElementMap[], options: SortOptions) {\r\n    this.array = array;\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * sort and visualize the array sorting\r\n   */\r\n  public sort = async () => {\r\n    let low = 0;\r\n    let high = this.array.length - 1;\r\n    await this.mergeSort(this.array, low, high);\r\n  };\r\n\r\n  /**\r\n   * merge sort items\r\n   */\r\n  private mergeSort = async (\r\n    array: ItemElementMap[],\r\n    low: number,\r\n    high: number\r\n  ) => {\r\n    if (low < high) {\r\n      let mid = Math.floor((low + high) / 2);\r\n      await this.mergeSort(array, low, mid);\r\n      await this.mergeSort(array, mid + 1, high);\r\n      await this.merge(array, low, mid, high);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * merge items\r\n   */\r\n  private merge = async (\r\n    array: ItemElementMap[],\r\n    low: number,\r\n    mid: number,\r\n    high: number\r\n  ) => {\r\n    let i = low;\r\n    let j = mid + 1;\r\n    let k = low;\r\n    let newArray: ItemElementMap[] = [];\r\n\r\n    while (i <= mid && j <= high) {\r\n      if (array[i].value <= array[j].value) {\r\n        newArray[k] = array[i];\r\n        i++;\r\n      } else {\r\n        newArray[k] = array[j];\r\n        j++;\r\n      }\r\n\r\n      k++;\r\n    }\r\n\r\n    if (i > mid) {\r\n      while (j <= high) {\r\n        newArray[k] = array[j];\r\n        j++;\r\n        k++;\r\n      }\r\n    } else {\r\n      while (i <= mid) {\r\n        newArray[k] = array[i];\r\n        i++;\r\n        k++;\r\n      }\r\n    }\r\n\r\n    let filteredArray = newArray.filter((i) => i !== null);\r\n    let isLastMerge = array.length === filteredArray.length;\r\n    let color = appsettings.itemColor;\r\n\r\n    for (k = low; k <= high; k++) {\r\n      array[k] = newArray[k];\r\n      let previousIndex = array[k].previousIndex;\r\n      let totalMovement = (k - previousIndex) * (this.options.itemWidth + 1);\r\n      await SortingHelper.animate(array[k].element, totalMovement);\r\n      await SortingHelper.sleep(this.options.getSortingSpeed());\r\n      if (isLastMerge) {\r\n        array[k].element.style.backgroundColor = color.sorted;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default MergeSortEngine;\r\n","import ISortEngine from \"./isortengine\";\r\nimport appsettings from \"../../appsettings\";\r\nimport SortingHelper from \"./sortinghelper\";\r\nimport ItemElementMap from \"./typings/itemelementmap\";\r\nimport SortOptions from \"../../components/stage/typings/sortoptions\";\r\n\r\nclass BubbleSortEngine implements ISortEngine {\r\n  // array to sort\r\n  private array: ItemElementMap[];\r\n\r\n  // sort options\r\n  private options: SortOptions;\r\n\r\n  /**\r\n   * constructor of bubble sort engine\r\n   */\r\n  constructor(array: ItemElementMap[], options: SortOptions) {\r\n    this.array = array;\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * sort and visualize the array sorting\r\n   */\r\n  public sort = async () => {\r\n    let n = this.array.length - 1;\r\n    let color = appsettings.itemColor;\r\n\r\n    for (let i = 0; i <= n; i++) {\r\n      if (i < n) {\r\n        for (let j = 0; j < n - i; j++) {\r\n          let item1 = this.array[j];\r\n          let item2 = this.array[j + 1];\r\n\r\n          item1.element.style.backgroundColor = color.current;\r\n\r\n          if (item1.value > item2.value) {\r\n            await SortingHelper.sleep(this.options.getSortingSpeed());\r\n\r\n            //swap items\r\n            SortingHelper.swap(this.array, j, j + 1);\r\n\r\n            // swap ui items\r\n            await this.swapInUI(item1, item2);\r\n          }\r\n\r\n          item1.element.style.backgroundColor = color.default;\r\n        }\r\n      }\r\n\r\n      let sortedItem = this.array[n - i];\r\n      sortedItem.element.style.backgroundColor = color.sorted;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * swap ui items\r\n   */\r\n  private swapInUI = async (item1: ItemElementMap, item2: ItemElementMap) => {\r\n    let toMove = this.options.itemWidth + 1;\r\n    item1.totalTranlation += toMove;\r\n    item2.totalTranlation -= toMove;\r\n\r\n    await SortingHelper.animate(item1.element, item1.totalTranlation);\r\n    await SortingHelper.animate(item2.element, item2.totalTranlation);\r\n  };\r\n}\r\n\r\nexport default BubbleSortEngine;\r\n","import * as enums from \"../../enums\";\r\nimport ISortEngine from \"./isortengine\";\r\nimport SortingHelper from \"./sortinghelper\";\r\nimport QuickSortEngine from \"./quicksortengine\";\r\nimport MergeSortEngine from \"./mergesortengine\";\r\nimport BubbleSortEngine from \"./bubblesortengine\";\r\nimport ItemElementMap from \"./typings/itemelementmap\";\r\nimport SortOptions from \"../../components/stage/typings/sortoptions\";\r\n\r\nclass SortingEngine {\r\n  // holds array to sort\r\n  private arrayToSort: number[];\r\n\r\n  /**\r\n   * constructor of sorting engine\r\n   */\r\n  constructor(arrayToSort: number[]) {\r\n    if (arrayToSort.length === 0) {\r\n      throw new Error(\"Array to sort must have some elements\");\r\n    }\r\n\r\n    this.arrayToSort = arrayToSort;\r\n  }\r\n\r\n  /**\r\n   * Map DOM elements with array to sort based on index\r\n   */\r\n  private mapArrayWithDOMElements = (): ItemElementMap[] => {\r\n    let map: ItemElementMap[] = [];\r\n    let items = SortingHelper.getSortableUIItems();\r\n\r\n    map = this.arrayToSort.map((item: number, index: number) => {\r\n      let newItem: ItemElementMap = {\r\n        value: item,\r\n        element: items[index],\r\n        totalTranlation: 0,\r\n        previousIndex: index,\r\n      };\r\n      return newItem;\r\n    });\r\n\r\n    return map;\r\n  };\r\n\r\n  /**\r\n   * sorts array based on the algorithm specified\r\n   */\r\n  public sort = async (algorithm: enums.Algorithms, options: SortOptions) => {\r\n    let engine: ISortEngine;\r\n    let mappedArray = this.mapArrayWithDOMElements();\r\n\r\n    switch (algorithm) {\r\n      case enums.Algorithms.BubbleSort:\r\n        engine = new BubbleSortEngine(mappedArray, options);\r\n        break;\r\n      case enums.Algorithms.QuickSort:\r\n        engine = new QuickSortEngine(mappedArray, options);\r\n        break;\r\n      case enums.Algorithms.MergeSort:\r\n        engine = new MergeSortEngine(mappedArray, options);\r\n        break;\r\n      default:\r\n        throw new Error(`Algorithm with id ${algorithm} not yet implemented`);\r\n    }\r\n\r\n    await engine.sort();\r\n  };\r\n}\r\n\r\nexport default SortingEngine;\r\n","import React from \"react\";\r\nimport * as enums from \"../../enums\";\r\nimport settings from \"../../appsettings\";\r\nimport StageControls from \"./stagecontrols\";\r\nimport ItemContainer from \"./itemcontainer\";\r\nimport SortOptions from \"./typings/sortoptions\";\r\nimport SortingEngine from \"../../helpers/sorting/sortingengine\";\r\nimport SortingHelper from \"../../helpers/sorting/sortinghelper\";\r\n\r\ninterface State {\r\n  renderedOn: number;\r\n  sortingInProgress: boolean;\r\n  removeItems: boolean;\r\n}\r\n\r\ninterface Props {}\r\n\r\nclass Stage extends React.Component<Props, State> {\r\n  // array to sort\r\n  private arrayToSort: number[] = [];\r\n\r\n  // original array\r\n  private rawArray: number[] = [];\r\n\r\n  // width of an item in stage\r\n  private itemWidth = 0;\r\n\r\n  // total items to sort\r\n  private itemCount = 0;\r\n\r\n  // sorting speed\r\n  private sortingSpeed = 0;\r\n\r\n  // width of stage\r\n  private stageWidth = 800;\r\n\r\n  // height of stage\r\n  private stageHeight = 400;\r\n\r\n  // sorting algorithm\r\n  private sortingAlgorithm: enums.Algorithms;\r\n\r\n  // flag to hold if reset done after sorting\r\n  private resetDone: boolean;\r\n\r\n  /**\r\n   * constructor of stage\r\n   */\r\n  constructor(props: Props, state: State) {\r\n    super(props, state);\r\n    this.state = {\r\n      renderedOn: 0,\r\n      sortingInProgress: false,\r\n      removeItems: false,\r\n    };\r\n    this.sortingAlgorithm = enums.Algorithms.BubbleSort;\r\n    this.resetDone = true;\r\n    this.setItemWidth();\r\n    this.generateRandomArray();\r\n  }\r\n\r\n  /**\r\n   * component did mount for stage\r\n   */\r\n  public componentDidMount() {\r\n    this.setSortingSpeed();\r\n  }\r\n\r\n  /**\r\n   * render stage to DOM\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"stage\">\r\n        <StageControls\r\n          selectedAlgorithm={this.sortingAlgorithm}\r\n          startSorting={this.startSorting}\r\n          resetArray={this.resetArray}\r\n          onItemWidthChange={this.onItemWidthChange}\r\n          onSortingSpeedChange={this.onSortingSpeedChange}\r\n          onAlgorithmSelected={this.onAlgorithmSelected}\r\n          sortingInProgress={this.state.sortingInProgress}\r\n        />\r\n        <p className=\"total\">Total items to sort: {this.arrayToSort.length}</p>\r\n        {!this.state.removeItems ? (\r\n          <ItemContainer\r\n            items={this.arrayToSort}\r\n            maxHeight={this.stageHeight}\r\n            itemWidth={this.itemWidth}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * start array sorting\r\n   */\r\n  private startSorting = (e: React.MouseEvent<HTMLElement>) => {\r\n    if (this.resetDone) {\r\n      try {\r\n        let options = {\r\n          itemWidth: this.itemWidth,\r\n          getSortingSpeed: this.getSortingSpeed,\r\n        } as SortOptions;\r\n        let sortingEngine = new SortingEngine(this.arrayToSort);\r\n\r\n        this.setState({ sortingInProgress: true }, async () => {\r\n          this.resetDone = false;\r\n          await sortingEngine.sort(this.sortingAlgorithm, options);\r\n          this.setState({ sortingInProgress: false });\r\n        });\r\n      } catch (e) {\r\n        this.setState({ sortingInProgress: false });\r\n        console.error(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * triggered when algorithm selection is changed\r\n   */\r\n  private onAlgorithmSelected = (algorithm: enums.Algorithms) => {\r\n    this.sortingAlgorithm = algorithm;\r\n    this.arrayToSort = [...this.rawArray.slice(0, this.itemCount)];\r\n    this.setStateToRemoveItems();\r\n  };\r\n\r\n  /**\r\n   * reset array for sorting\r\n   */\r\n  private resetArray = (e: React.MouseEvent<HTMLElement>) => {\r\n    this.reset();\r\n  };\r\n\r\n  /**\r\n   * get sorting speed\r\n   */\r\n  private getSortingSpeed = (): number => {\r\n    return this.sortingSpeed;\r\n  };\r\n\r\n  /**\r\n   * set state to remove and rerender items on stage\r\n   */\r\n  private setStateToRemoveItems = () => {\r\n    this.resetDone = true;\r\n    this.setState({ removeItems: true }, () => {\r\n      setTimeout(() => {\r\n        this.setState({ removeItems: false });\r\n      }, 10);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * reset array\r\n   */\r\n  private reset = () => {\r\n    this.generateRandomArray();\r\n    this.setStateToRemoveItems();\r\n  };\r\n\r\n  /**\r\n   * start array sorting\r\n   */\r\n  private onItemWidthChange = (e: React.ChangeEvent<HTMLElement>) => {\r\n    if (!this.resetDone) {\r\n      this.reset();\r\n    }\r\n    let target: any = e.target;\r\n    this.itemWidth = SortingHelper.getItemWidth(parseInt(target.value));\r\n    this.setItemWidth();\r\n    this.arrayToSort = this.rawArray.slice(0, this.itemCount);\r\n    this.setState({ renderedOn: Date.now() });\r\n  };\r\n\r\n  /**\r\n   * trigger when sorting speed is changed\r\n   */\r\n  private onSortingSpeedChange = (e: React.ChangeEvent<HTMLElement>) => {\r\n    let target: any = e.target;\r\n    let weight = parseInt(target.value);\r\n    this.setSortingSpeed(weight);\r\n  };\r\n\r\n  /**\r\n   * set width of item\r\n   */\r\n  private setItemWidth = () => {\r\n    if (this.itemCount === 0) {\r\n      this.itemWidth = SortingHelper.getItemWidth(settings.itemWidth.default);\r\n    }\r\n    this.itemCount = this.stageWidth / (this.itemWidth + 1);\r\n  };\r\n\r\n  /**\r\n   * generate random array\r\n   */\r\n  private generateRandomArray = () => {\r\n    this.rawArray = SortingHelper.generateRandomArray(400, 1, this.stageHeight);\r\n    this.arrayToSort = [...this.rawArray];\r\n    this.arrayToSort = this.rawArray.slice(0, this.itemCount);\r\n  };\r\n\r\n  /**\r\n   * set sorting speed\r\n   */\r\n  private setSortingSpeed = (index = 0) => {\r\n    this.sortingSpeed = SortingHelper.getSortingSpeed(\r\n      index === 0 ? settings.sortingSpeed.default : index\r\n    );\r\n\r\n    this.setTransitionForSortableItems();\r\n  };\r\n\r\n  /**\r\n   * set transition for sortable items\r\n   */\r\n  private setTransitionForSortableItems = () => {\r\n    let sortableItems = SortingHelper.getSortableUIItems();\r\n    let speed = this.sortingSpeed / 1000;\r\n\r\n    if (sortableItems.length !== this.arrayToSort.length) {\r\n      throw new Error(\"DOM element count not matching with array to sort\");\r\n    }\r\n\r\n    for (let i = 0; i < this.arrayToSort.length; i++) {\r\n      sortableItems[i].style.transition = `transform ${speed}s`;\r\n    }\r\n  };\r\n}\r\n\r\nexport default Stage;\r\n","import React from \"react\";\r\nimport Stage from \"./components/stage/stage\";\r\n\r\nfunction App() {\r\n  return <Stage />;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}