{"version":3,"sources":["enums/index.ts","appsettings.js","components/stage/stagecontrols.tsx","components/stage/itemcontainer.tsx","helpers/sorting/sortinghelper.ts","helpers/sorting/bubblesortengine.ts","helpers/sorting/sortingengine.ts","components/stage/stage.tsx","App.tsx","index.tsx"],"names":["Algorithms","settings","itemWidth","default","min","max","StageControls","props","itemWidthRangeOptions","getNavItem","text","algorithm","className","classNames","active","selectedAlgorithm","disable","sortingInProgress","onClick","onAlgorithmSelected","href","data-id","resetArray","disabled","type","defaultValue","onChange","onItemWidthChange","enums","BubbleSort","QuickSort","MergeSort","startSorting","stopSorting","ItemContainer","maxHeight","items","map","item","index","style","marginTop","width","key","data-index","renderItem","SortingHelper","generateRandomArray","length","Array","from","Math","floor","random","getItemWidth","sizeIndex","itemSize","Error","sleep","milliseconds","Promise","resolve","setTimeout","BubbleSortEngine","array","options","sort","a","n","i","j","item1","item2","value","temp","totalTranlation","element","backgroundColor","left","this","SortingEngine","arrayToSort","getItems","document","getElementsByClassName","getElementsByTagName","mapArrayWithDOMElements","mappedArray","engine","Stage","state","rawArray","itemCount","stageWidth","stageHeight","sortingAlgorithm","e","sortingEngine","setState","console","error","renderedOn","Date","now","removeItems","target","parseInt","setItemWidth","slice","React","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.801af549.chunk.js","sourcesContent":["/**\r\n * Enums for different algorithms\r\n */\r\nexport enum Algorithms {\r\n  BubbleSort = 1,\r\n  QuickSort = 2,\r\n  MergeSort = 3,\r\n}\r\n","var settings = {\r\n  itemWidth: {\r\n    // default, min and max are index of [2, 4, 5, 10, 20, 40, 50] '\r\n    // which are item width in pixel\r\n    default: 7,\r\n    min: 1,\r\n    max: 7,\r\n  },\r\n};\r\n\r\nexport default settings;\r\n","import React from \"react\";\r\nimport * as enums from \"../../enums\";\r\nimport settings from \"../../appsettings\";\r\nimport { RangeOptions } from \"./typings/rangeoptions\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface Props {\r\n  selectedAlgorithm: enums.Algorithms;\r\n  sortingInProgress: boolean;\r\n  resetArray: (event: React.MouseEvent<HTMLElement>) => void;\r\n  startSorting: (event: React.MouseEvent<HTMLElement>) => void;\r\n  stopSorting: (event: React.MouseEvent<HTMLElement>) => void;\r\n  onItemWidthChange: (event: React.ChangeEvent<HTMLElement>) => void;\r\n  onAlgorithmSelected: (algorithm: enums.Algorithms) => void;\r\n}\r\n\r\nconst StageControls: React.SFC<Props> = (props) => {\r\n  // options for item width range selector\r\n  const itemWidthRangeOptions: RangeOptions = {\r\n    default: settings.itemWidth.default,\r\n    min: settings.itemWidth.min,\r\n    max: settings.itemWidth.max,\r\n  };\r\n\r\n  // generate nav item\r\n  const getNavItem = (text: string, algorithm: enums.Algorithms) => {\r\n    return (\r\n      <li\r\n        className={classNames({\r\n          active: props.selectedAlgorithm === algorithm,\r\n          disable: props.sortingInProgress,\r\n        })}\r\n      >\r\n        <a\r\n          onClick={() => props.onAlgorithmSelected(algorithm)}\r\n          href=\"#\"\r\n          data-id={algorithm}\r\n        >\r\n          {text}\r\n        </a>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-inverse\">\r\n      <div className=\"container-fluid\">\r\n        <ul className=\"nav navbar-nav\">\r\n          <li>\r\n            <button\r\n              className=\"btn btn-primary navbar-btn right-margin16px\"\r\n              onClick={props.resetArray}\r\n              disabled={props.sortingInProgress}\r\n            >\r\n              Reset\r\n            </button>\r\n          </li>\r\n          <li className=\"range\">\r\n            <p>item width</p>\r\n            <input\r\n              type=\"range\"\r\n              min={itemWidthRangeOptions.min}\r\n              max={itemWidthRangeOptions.max}\r\n              defaultValue={itemWidthRangeOptions.default}\r\n              onChange={props.onItemWidthChange}\r\n              disabled={props.sortingInProgress}\r\n            />\r\n          </li>\r\n        </ul>\r\n        <ul className=\"nav navbar-nav\">\r\n          {getNavItem(\"Bubble sort\", enums.Algorithms.BubbleSort)}\r\n          {getNavItem(\"Quick sort\", enums.Algorithms.QuickSort)}\r\n          {getNavItem(\"Merge sort\", enums.Algorithms.MergeSort)}\r\n        </ul>\r\n        <ul className=\"nav navbar-nav\">\r\n          <li>\r\n            <button\r\n              onClick={props.startSorting}\r\n              className=\"btn btn-success navbar-btn right-margin16px left-margin16px\"\r\n              disabled={props.sortingInProgress}\r\n            >\r\n              Start\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button\r\n              onClick={props.stopSorting}\r\n              className=\"btn btn-danger navbar-btn right-margin16px\"\r\n            >\r\n              Stop\r\n            </button>\r\n          </li>\r\n          <li className=\"range\">\r\n            <p>Sorting speed</p>\r\n            <input type=\"range\" />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default StageControls;\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  items: number[];\r\n  maxHeight: number;\r\n  itemWidth: number;\r\n}\r\n\r\nconst ItemContainer: React.SFC<Props> = (props) => {\r\n  const { maxHeight, items, itemWidth } = props;\r\n\r\n  /** render each sortable item */\r\n  const renderItem = (item: number, index: number) => {\r\n    let style: React.CSSProperties = {\r\n      marginTop: maxHeight - item,\r\n      width: itemWidth,\r\n    };\r\n    return <div style={style} key={index} data-index={index}></div>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"item-container\">\r\n      {items.map((item: number, index: number) => {\r\n        return renderItem(item, index);\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemContainer;\r\n","class SortingHelper {\r\n  /**\r\n   * generate random array based on the length\r\n   */\r\n  public static generateRandomArray = (\r\n    length: number,\r\n    min: number,\r\n    max: number\r\n  ) => {\r\n    return Array.from(\r\n      {\r\n        length: length,\r\n      },\r\n      () => min + Math.floor(Math.random() * (max - min + 1))\r\n    );\r\n  };\r\n\r\n  /**\r\n   * return item width in pixel\r\n   */\r\n  public static getItemWidth = (sizeIndex: number): number => {\r\n    // width of each item will be the value + 1px margin\r\n    // example if width is 3 then item width will be 49 + 1 = 4\r\n    let itemSize = [1, 3, 4, 9, 19, 39, 49];\r\n    if (sizeIndex > itemSize.length) {\r\n      throw Error(\"Size index not valid for item width\");\r\n    }\r\n\r\n    return itemSize[sizeIndex - 1];\r\n  };\r\n\r\n  /**\r\n   * sleep for the specified amount of time\r\n   */\r\n  public static sleep = (milliseconds: number) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n}\r\n\r\nexport default SortingHelper;\r\n","import ISortEngine from \"./isortengine\";\r\nimport SortingHelper from \"./sortinghelper\";\r\nimport ItemElementMap from \"./typings/itemelementmap\";\r\nimport SortOptions from \"../../components/stage/typings/sortoptions\";\r\n\r\nclass BubbleSortEngine implements ISortEngine {\r\n  // array to sort\r\n  private array: ItemElementMap[];\r\n\r\n  // sort options\r\n  private options: SortOptions;\r\n\r\n  /**\r\n   * constructor of bubble sort engine\r\n   */\r\n  constructor(array: ItemElementMap[], options: SortOptions) {\r\n    this.array = array;\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * sort and visualize the array sorting\r\n   */\r\n  public sort = async () => {\r\n    let n = this.array.length - 1;\r\n    for (let i = 0; i <= n; i++) {\r\n      if (i < n) {\r\n        for (let j = 0; j < n - i; j++) {\r\n          let item1 = this.array[j];\r\n          let item2 = this.array[j + 1];\r\n\r\n          if (item1.value > item2.value) {\r\n            //swap items\r\n            let temp = this.array[j];\r\n            this.array[j] = this.array[j + 1];\r\n            this.array[j + 1] = temp;\r\n\r\n            item1.totalTranlation += this.options.itemWidth + 1;\r\n            item2.totalTranlation -= this.options.itemWidth + 1;\r\n\r\n            item1.element.style.backgroundColor = \"#f73838\";\r\n\r\n            await SortingHelper.sleep(0);\r\n\r\n            item1.element.style.left = `${item1.totalTranlation}px`;\r\n            item2.element.style.left = `${item2.totalTranlation}px`;\r\n\r\n            item1.element.style.backgroundColor = \"#01d0df\";\r\n          }\r\n        }\r\n      }\r\n\r\n      let sortedItem = this.array[n - i];\r\n      sortedItem.element.style.backgroundColor = \"#7bd475\";\r\n    }\r\n  };\r\n}\r\n\r\nexport default BubbleSortEngine;\r\n","import * as enums from \"../../enums\";\r\nimport ISortEngine from \"./isortengine\";\r\nimport BubbleSortEngine from \"./bubblesortengine\";\r\nimport ItemElementMap from \"./typings/itemelementmap\";\r\nimport SortOptions from \"../../components/stage/typings/sortoptions\";\r\n\r\nclass SortingEngine {\r\n  // holds array to sort\r\n  private arrayToSort: number[];\r\n\r\n  /**\r\n   * constructor of sorting engine\r\n   */\r\n  constructor(arrayToSort: number[]) {\r\n    if (arrayToSort.length === 0) {\r\n      throw new Error(\"Array to sort must have some elements\");\r\n    }\r\n\r\n    this.arrayToSort = arrayToSort;\r\n  }\r\n\r\n  /**\r\n   * Get all DOM elements to sort\r\n   */\r\n  private getItems = () => {\r\n    let itemContainer = document.getElementsByClassName(\"item-container\")[0];\r\n    let items = itemContainer.getElementsByTagName(\"div\");\r\n\r\n    if (items.length !== this.arrayToSort.length) {\r\n      throw new Error(\"DOM element count not matching with array to sort\");\r\n    }\r\n\r\n    return items;\r\n  };\r\n\r\n  /**\r\n   * Map DOM elements with array to sort based on index\r\n   */\r\n  private mapArrayWithDOMElements = (): ItemElementMap[] => {\r\n    let map: ItemElementMap[] = [];\r\n    let items = this.getItems();\r\n    map = this.arrayToSort.map((item: number, index: number) => {\r\n      let newItem: ItemElementMap = {\r\n        value: item,\r\n        element: items[index],\r\n        totalTranlation: 0,\r\n      };\r\n      return newItem;\r\n    });\r\n\r\n    return map;\r\n  };\r\n\r\n  /**\r\n   * sorts array based on the algorithm specified\r\n   */\r\n  public sort = async (algorithm: enums.Algorithms, options: SortOptions) => {\r\n    let engine: ISortEngine;\r\n    let mappedArray = this.mapArrayWithDOMElements();\r\n\r\n    switch (algorithm) {\r\n      case enums.Algorithms.BubbleSort:\r\n        engine = new BubbleSortEngine(mappedArray, options);\r\n        break;\r\n      default:\r\n        throw new Error(`Algorithm with id ${algorithm} not yet implemented`);\r\n    }\r\n\r\n    await engine.sort();\r\n  };\r\n}\r\n\r\nexport default SortingEngine;\r\n","import React from \"react\";\r\nimport * as enums from \"../../enums\";\r\nimport settings from \"../../appsettings\";\r\nimport StageControls from \"./stagecontrols\";\r\nimport ItemContainer from \"./itemcontainer\";\r\nimport SortOptions from \"./typings/sortoptions\";\r\nimport SortingEngine from \"../../helpers/sorting/sortingengine\";\r\nimport SortingHelper from \"../../helpers/sorting/sortinghelper\";\r\n\r\ninterface State {\r\n  renderedOn: number;\r\n  sortingInProgress: boolean;\r\n  removeItems: boolean;\r\n}\r\n\r\ninterface Props {}\r\n\r\nclass Stage extends React.Component<Props, State> {\r\n  // array to sort\r\n  private arrayToSort: number[] = [];\r\n\r\n  // original array\r\n  private rawArray: number[] = [];\r\n\r\n  // width of an item in stage\r\n  private itemWidth = 0;\r\n\r\n  // total items to sort\r\n  private itemCount = 0;\r\n\r\n  // width of stage\r\n  private stageWidth = 800;\r\n\r\n  // height of stage\r\n  private stageHeight = 400;\r\n\r\n  // sorting algorithm\r\n  private sortingAlgorithm: enums.Algorithms;\r\n\r\n  /**\r\n   * constructor of stage\r\n   */\r\n  constructor(props: Props, state: State) {\r\n    super(props, state);\r\n    this.state = {\r\n      renderedOn: 0,\r\n      sortingInProgress: false,\r\n      removeItems: false,\r\n    };\r\n    this.sortingAlgorithm = enums.Algorithms.BubbleSort;\r\n    this.setItemWidth();\r\n    this.generateRandomArray();\r\n  }\r\n\r\n  /**\r\n   * render stage to DOM\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"stage\">\r\n        <StageControls\r\n          selectedAlgorithm={this.sortingAlgorithm}\r\n          startSorting={this.startSorting}\r\n          stopSorting={this.stopSorting}\r\n          resetArray={this.resetArray}\r\n          onItemWidthChange={this.onItemWidthChange}\r\n          onAlgorithmSelected={this.onAlgorithmSelected}\r\n          sortingInProgress={this.state.sortingInProgress}\r\n        />\r\n        {!this.state.removeItems ? (\r\n          <ItemContainer\r\n            items={this.arrayToSort}\r\n            maxHeight={this.stageHeight}\r\n            itemWidth={this.itemWidth}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * start array sorting\r\n   */\r\n  private startSorting = (e: React.MouseEvent<HTMLElement>) => {\r\n    try {\r\n      let options = {\r\n        itemWidth: this.itemWidth,\r\n      } as SortOptions;\r\n      let sortingEngine = new SortingEngine(this.arrayToSort);\r\n\r\n      this.setState({ sortingInProgress: true }, async () => {\r\n        await sortingEngine.sort(this.sortingAlgorithm, options);\r\n        this.setState({ sortingInProgress: false });\r\n      });\r\n    } catch (e) {\r\n      this.setState({ sortingInProgress: false });\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * stop array sorting\r\n   */\r\n  private stopSorting = (e: React.MouseEvent<HTMLElement>) => {\r\n    this.setState({ sortingInProgress: false });\r\n  };\r\n\r\n  /**\r\n   * triggered when algorithm selection is changed\r\n   */\r\n  private onAlgorithmSelected = (algorithm: enums.Algorithms) => {\r\n    this.sortingAlgorithm = algorithm;\r\n    this.setState({ renderedOn: Date.now() });\r\n  };\r\n\r\n  /**\r\n   * reset array for sorting\r\n   */\r\n  private resetArray = (e: React.MouseEvent<HTMLElement>) => {\r\n    this.generateRandomArray();\r\n    this.setState({ removeItems: true }, () => {\r\n      setTimeout(() => {\r\n        this.setState({ removeItems: false });\r\n      }, 10);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * start array sorting\r\n   */\r\n  private onItemWidthChange = (e: React.ChangeEvent<HTMLElement>) => {\r\n    let target: any = e.target;\r\n    this.itemWidth = SortingHelper.getItemWidth(parseInt(target.value));\r\n    this.setItemWidth();\r\n    this.arrayToSort = this.rawArray.slice(0, this.itemCount);\r\n    this.setState({ renderedOn: Date.now() });\r\n  };\r\n\r\n  /**\r\n   * set width of item\r\n   */\r\n  private setItemWidth = () => {\r\n    if (this.itemCount === 0) {\r\n      this.itemWidth = SortingHelper.getItemWidth(settings.itemWidth.default);\r\n    }\r\n    this.itemCount = this.stageWidth / (this.itemWidth + 1);\r\n  };\r\n\r\n  /**\r\n   * generate random array\r\n   */\r\n  private generateRandomArray = () => {\r\n    this.rawArray = SortingHelper.generateRandomArray(400, 1, this.stageHeight);\r\n    this.arrayToSort = [...this.rawArray];\r\n    this.arrayToSort = this.rawArray.slice(0, this.itemCount);\r\n  };\r\n}\r\n\r\nexport default Stage;\r\n","import React from \"react\";\r\nimport Stage from \"./components/stage/stage\";\r\n\r\nfunction App() {\r\n  return <Stage />;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}