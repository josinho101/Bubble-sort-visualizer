{"version":3,"sources":["enums/index.ts","appsettings.js","components/stage/stagecontrols.tsx","components/stage/itemcontainer.tsx","helpers/sorting/sortinghelper.ts","helpers/sorting/quicksortengine.ts","helpers/sorting/bubblesortengine.ts","helpers/sorting/sortingengine.ts","components/stage/stage.tsx","App.tsx","index.tsx"],"names":["Algorithms","settings","itemWidth","default","min","max","sortingSpeed","itemColor","bubbleSort","sorted","notSorted","current","quickSort","pivot","StageControls","props","itemWidthRangeOptions","speedRangeOptions","getNavItem","text","algorithm","className","classNames","active","selectedAlgorithm","disable","sortingInProgress","onClick","onAlgorithmSelected","href","data-id","resetArray","disabled","type","defaultValue","onChange","onItemWidthChange","enums","BubbleSort","QuickSort","MergeSort","startSorting","stopSorting","onSortingSpeedChange","ItemContainer","maxHeight","items","map","item","index","style","marginTop","width","key","data-index","renderItem","SortingHelper","generateRandomArray","length","Array","from","Math","floor","random","getItemWidth","sizeIndex","itemSize","Error","getSortingSpeed","sleep","milliseconds","Promise","resolve","setTimeout","swap","array","index1","index2","temp","animate","element","x","transform","ontransitionend","QuickSortEngine","options","sort","a","high","low","partition","partitionIndex","setAsSorted","value","start","end","swapInUI","item1","item2","toMove","abs","totalTranlation","to","sortedColor","appsettings","slice","forEach","backgroundColor","this","BubbleSortEngine","n","color","i","j","SortingEngine","arrayToSort","getItems","document","getElementsByClassName","getElementsByTagName","speed","transition","mapArrayWithDOMElements","mappedArray","engine","Stage","state","rawArray","itemCount","stageWidth","stageHeight","sortingAlgorithm","resetDone","e","continueSorting","sortingEngine","setState","console","error","renderedOn","Date","now","reset","removeItems","target","parseInt","setItemWidth","weight","setSortingSpeed","React","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.84bd89bb.chunk.js","sourcesContent":["/**\r\n * Enums for different algorithms\r\n */\r\nexport enum Algorithms {\r\n  BubbleSort = 1,\r\n  QuickSort = 2,\r\n  MergeSort = 3,\r\n}\r\n","var settings = {\r\n  itemWidth: {\r\n    // default, min and max are index of [2, 4, 5, 10, 20, 40, 50] '\r\n    // which are item width in pixel\r\n    default: 4,\r\n    min: 1,\r\n    max: 7,\r\n  },\r\n  sortingSpeed: {\r\n    default: 7,\r\n    min: 1,\r\n    max: 10,\r\n  },\r\n  itemColor: {\r\n    bubbleSort: {\r\n      sorted: \"#7bd475\",\r\n      notSorted: \"#01d0df\",\r\n      current: \"#f73838\",\r\n    },\r\n    quickSort: {\r\n      pivot: \"#f579f5\",\r\n      sorted: \"#7bd475\",\r\n      current: \"#f73838\",\r\n      default: \"#01d0df\",\r\n    },\r\n  },\r\n};\r\n\r\nexport default settings;\r\n","import React from \"react\";\r\nimport * as enums from \"../../enums\";\r\nimport settings from \"../../appsettings\";\r\nimport { RangeOptions } from \"./typings/rangeoptions\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface Props {\r\n  selectedAlgorithm: enums.Algorithms;\r\n  sortingInProgress: boolean;\r\n  resetArray: (event: React.MouseEvent<HTMLElement>) => void;\r\n  startSorting: (event: React.MouseEvent<HTMLElement>) => void;\r\n  stopSorting: (event: React.MouseEvent<HTMLElement>) => void;\r\n  onItemWidthChange: (event: React.ChangeEvent<HTMLElement>) => void;\r\n  onSortingSpeedChange: (event: React.ChangeEvent<HTMLElement>) => void;\r\n  onAlgorithmSelected: (algorithm: enums.Algorithms) => void;\r\n}\r\n\r\nconst StageControls: React.SFC<Props> = (props) => {\r\n  // options for item width range selector\r\n  const itemWidthRangeOptions: RangeOptions = {\r\n    default: settings.itemWidth.default,\r\n    min: settings.itemWidth.min,\r\n    max: settings.itemWidth.max,\r\n  };\r\n\r\n  // options for sorting speed range selector\r\n  const speedRangeOptions: RangeOptions = {\r\n    default: settings.sortingSpeed.default,\r\n    min: settings.sortingSpeed.min,\r\n    max: settings.sortingSpeed.max,\r\n  };\r\n\r\n  // generate nav item\r\n  const getNavItem = (text: string, algorithm: enums.Algorithms) => {\r\n    return (\r\n      <li\r\n        className={classNames({\r\n          active: props.selectedAlgorithm === algorithm,\r\n          disable: props.sortingInProgress,\r\n        })}\r\n      >\r\n        <a\r\n          onClick={() => props.onAlgorithmSelected(algorithm)}\r\n          href=\"#\"\r\n          data-id={algorithm}\r\n        >\r\n          {text}\r\n        </a>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-inverse\">\r\n      <div className=\"container-fluid\">\r\n        <ul className=\"nav navbar-nav\">\r\n          <li>\r\n            <button\r\n              className=\"btn btn-primary navbar-btn right-margin16px\"\r\n              onClick={props.resetArray}\r\n              disabled={props.sortingInProgress}\r\n            >\r\n              Reset\r\n            </button>\r\n          </li>\r\n          <li className=\"range\">\r\n            <p>item width</p>\r\n            <input\r\n              type=\"range\"\r\n              min={itemWidthRangeOptions.min}\r\n              max={itemWidthRangeOptions.max}\r\n              defaultValue={itemWidthRangeOptions.default}\r\n              onChange={props.onItemWidthChange}\r\n              disabled={props.sortingInProgress}\r\n            />\r\n          </li>\r\n        </ul>\r\n        <ul className=\"nav navbar-nav\">\r\n          {getNavItem(\"Bubble sort\", enums.Algorithms.BubbleSort)}\r\n          {getNavItem(\"Quick sort\", enums.Algorithms.QuickSort)}\r\n          {getNavItem(\"Merge sort\", enums.Algorithms.MergeSort)}\r\n        </ul>\r\n        <ul className=\"nav navbar-nav\">\r\n          <li>\r\n            <button\r\n              onClick={props.startSorting}\r\n              className=\"btn btn-success navbar-btn right-margin16px left-margin16px\"\r\n              disabled={props.sortingInProgress}\r\n            >\r\n              Start\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button\r\n              onClick={props.stopSorting}\r\n              className=\"btn btn-danger navbar-btn right-margin16px\"\r\n            >\r\n              Stop\r\n            </button>\r\n          </li>\r\n          <li className=\"range\">\r\n            <p>Sorting speed</p>\r\n            <input\r\n              type=\"range\"\r\n              min={speedRangeOptions.min}\r\n              max={speedRangeOptions.max}\r\n              defaultValue={speedRangeOptions.default}\r\n              onChange={props.onSortingSpeedChange}\r\n            />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default StageControls;\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  items: number[];\r\n  maxHeight: number;\r\n  itemWidth: number;\r\n}\r\n\r\nconst ItemContainer: React.SFC<Props> = (props) => {\r\n  const { maxHeight, items, itemWidth } = props;\r\n\r\n  /** render each sortable item */\r\n  const renderItem = (item: number, index: number) => {\r\n    let style: React.CSSProperties = {\r\n      marginTop: maxHeight - item,\r\n      width: itemWidth,\r\n    };\r\n    return <div style={style} key={index} data-index={index}></div>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"item-container\">\r\n      {items.map((item: number, index: number) => {\r\n        return renderItem(item, index);\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemContainer;\r\n","class SortingHelper {\r\n  /**\r\n   * generate random array based on the length\r\n   */\r\n  public static generateRandomArray = (\r\n    length: number,\r\n    min: number,\r\n    max: number\r\n  ) => {\r\n    return Array.from(\r\n      {\r\n        length: length,\r\n      },\r\n      () => min + Math.floor(Math.random() * (max - min + 1))\r\n    );\r\n  };\r\n\r\n  /**\r\n   * return item width in pixel\r\n   */\r\n  public static getItemWidth = (sizeIndex: number): number => {\r\n    // width of each item will be the value + 1px margin\r\n    // example if width is 3 then item width will be 49 + 1 = 4\r\n    let itemSize = [1, 3, 4, 9, 19, 39, 49];\r\n    if (sizeIndex > itemSize.length) {\r\n      throw Error(\"Size index not valid for item width\");\r\n    }\r\n\r\n    return itemSize[sizeIndex - 1];\r\n  };\r\n\r\n  /**\r\n   * return sorting speed\r\n   */\r\n  public static getSortingSpeed = (index: number) => {\r\n    let speed = [250, 200, 150, 100, 75, 50, 35, 25, 10, 1];\r\n    return speed[index - 1];\r\n  };\r\n\r\n  /**\r\n   * sleep for the specified amount of time\r\n   */\r\n  public static sleep = (milliseconds: number) => {\r\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n  };\r\n\r\n  /**\r\n   * swap items between index in an array\r\n   */\r\n  public static swap = (array: any, index1: number, index2: number) => {\r\n    let temp = array[index1];\r\n    array[index1] = array[index2];\r\n    array[index2] = temp;\r\n  };\r\n\r\n  /**\r\n   * animate element using translateX\r\n   */\r\n  public static animate = (element: HTMLElement, x: number) => {\r\n    new Promise((resolve) => {\r\n      element.style.transform = `translateX(${x}px)`;\r\n      element.ontransitionend = () => {\r\n        resolve();\r\n      };\r\n    });\r\n  };\r\n}\r\n\r\nexport default SortingHelper;\r\n","import ISortEngine from \"./isortengine\";\r\nimport appsettings from \"../../appsettings\";\r\nimport SortingHelper from \"./sortinghelper\";\r\nimport ItemElementMap from \"./typings/itemelementmap\";\r\nimport SortOptions from \"../../components/stage/typings/sortoptions\";\r\n\r\nclass QuickSortEngine implements ISortEngine {\r\n  // array to sort\r\n  private array: ItemElementMap[];\r\n\r\n  // sort options\r\n  private options: SortOptions;\r\n\r\n  /**\r\n   * constructor of quick sort engine\r\n   */\r\n  constructor(array: ItemElementMap[], options: SortOptions) {\r\n    this.array = array;\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * sort and visualize the array sorting\r\n   */\r\n  public sort = async () => {\r\n    let low = 0;\r\n    let high = this.array.length - 1;\r\n    await this.quickSort(this.array, low, high);\r\n  };\r\n\r\n  /**\r\n   * perform quick sort\r\n   */\r\n  private quickSort = async (\r\n    array: ItemElementMap[],\r\n    low: number,\r\n    high: number\r\n  ) => {\r\n    if (low < high) {\r\n      let partitionIndex = await this.partition(array, low, high);\r\n\r\n      await this.quickSort(array, low, partitionIndex - 1);\r\n      this.setAsSorted(array, low, partitionIndex);\r\n\r\n      await this.quickSort(array, partitionIndex + 1, high);\r\n      this.setAsSorted(array, partitionIndex, high);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * partiotion the array for quick sort\r\n   */\r\n  private partition = async (\r\n    array: ItemElementMap[],\r\n    low: number,\r\n    high: number\r\n  ) => {\r\n    let pivot = array[low].value;\r\n    let start = low;\r\n    let end = high;\r\n\r\n    while (start < end) {\r\n      while (array[start].value <= pivot && start < end) {\r\n        start++;\r\n      }\r\n\r\n      while (array[end].value > pivot) {\r\n        end--;\r\n      }\r\n\r\n      if (start < end) {\r\n        await SortingHelper.sleep(this.options.getSortingSpeed());\r\n        // swap items in UI\r\n        await this.swapInUI(array, start, end);\r\n        // swap start element with end\r\n        SortingHelper.swap(array, start, end);\r\n      }\r\n    }\r\n\r\n    await SortingHelper.sleep(this.options.getSortingSpeed());\r\n    // swap items in UI\r\n    await this.swapInUI(array, low, end);\r\n    // swap pivot with end\r\n    SortingHelper.swap(array, low, end);\r\n\r\n    return end;\r\n  };\r\n\r\n  /**\r\n   * Swap items in UI\r\n   */\r\n  private swapInUI = async (\r\n    array: ItemElementMap[],\r\n    index1: number,\r\n    index2: number\r\n  ) => {\r\n    let item1 = array[index1];\r\n    let item2 = array[index2];\r\n\r\n    let toMove = Math.abs(index1 - index2) * (this.options.itemWidth + 1);\r\n\r\n    item1.totalTranlation += toMove;\r\n    item2.totalTranlation -= toMove;\r\n\r\n    await SortingHelper.animate(item1.element, item1.totalTranlation);\r\n    await SortingHelper.animate(item2.element, item2.totalTranlation);\r\n\r\n    await SortingHelper.sleep(this.options.getSortingSpeed());\r\n  };\r\n\r\n  /**\r\n   * set specified from - to index as sorted\r\n   */\r\n  private setAsSorted = (array: ItemElementMap[], from: number, to: number) => {\r\n    let sortedColor = appsettings.itemColor.quickSort.sorted;\r\n    let sortedItems = array.slice(from, to + 1);\r\n    sortedItems.forEach((item: ItemElementMap) => {\r\n      item.element.style.backgroundColor = sortedColor;\r\n    });\r\n  };\r\n}\r\n\r\nexport default QuickSortEngine;\r\n","import ISortEngine from \"./isortengine\";\r\nimport appsettings from \"../../appsettings\";\r\nimport SortingHelper from \"./sortinghelper\";\r\nimport ItemElementMap from \"./typings/itemelementmap\";\r\nimport SortOptions from \"../../components/stage/typings/sortoptions\";\r\n\r\nclass BubbleSortEngine implements ISortEngine {\r\n  // array to sort\r\n  private array: ItemElementMap[];\r\n\r\n  // sort options\r\n  private options: SortOptions;\r\n\r\n  /**\r\n   * constructor of bubble sort engine\r\n   */\r\n  constructor(array: ItemElementMap[], options: SortOptions) {\r\n    this.array = array;\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * sort and visualize the array sorting\r\n   */\r\n  public sort = async () => {\r\n    let n = this.array.length - 1;\r\n    let color = appsettings.itemColor.bubbleSort;\r\n\r\n    for (let i = 0; i <= n; i++) {\r\n      if (i < n) {\r\n        for (let j = 0; j < n - i; j++) {\r\n          let item1 = this.array[j];\r\n          let item2 = this.array[j + 1];\r\n\r\n          if (item1.value > item2.value) {\r\n            //swap items\r\n            SortingHelper.swap(this.array, j, j + 1);\r\n\r\n            // swap ui items\r\n            await this.swapInUI(item1, item2);\r\n\r\n            await SortingHelper.sleep(this.options.getSortingSpeed());\r\n          }\r\n        }\r\n      }\r\n\r\n      let sortedItem = this.array[n - i];\r\n      sortedItem.element.style.backgroundColor = color.sorted;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * swap ui items\r\n   */\r\n  private swapInUI = async (item1: ItemElementMap, item2: ItemElementMap) => {\r\n    let toMove = this.options.itemWidth + 1;\r\n    item1.totalTranlation += toMove;\r\n    item2.totalTranlation -= toMove;\r\n\r\n    await SortingHelper.animate(item1.element, item1.totalTranlation);\r\n    await SortingHelper.animate(item2.element, item2.totalTranlation);\r\n  };\r\n}\r\n\r\nexport default BubbleSortEngine;\r\n","import * as enums from \"../../enums\";\r\nimport ISortEngine from \"./isortengine\";\r\nimport QuickSortEngine from \"./quicksortengine\";\r\nimport BubbleSortEngine from \"./bubblesortengine\";\r\nimport ItemElementMap from \"./typings/itemelementmap\";\r\nimport SortOptions from \"../../components/stage/typings/sortoptions\";\r\n\r\nclass SortingEngine {\r\n  // holds array to sort\r\n  private arrayToSort: number[];\r\n\r\n  /**\r\n   * constructor of sorting engine\r\n   */\r\n  constructor(arrayToSort: number[]) {\r\n    if (arrayToSort.length === 0) {\r\n      throw new Error(\"Array to sort must have some elements\");\r\n    }\r\n\r\n    this.arrayToSort = arrayToSort;\r\n  }\r\n\r\n  /**\r\n   * Get all DOM elements to sort\r\n   */\r\n  private getItems = (options: SortOptions) => {\r\n    let itemContainer = document.getElementsByClassName(\"item-container\")[0];\r\n    let items = itemContainer.getElementsByTagName(\"div\");\r\n\r\n    if (items.length !== this.arrayToSort.length) {\r\n      throw new Error(\"DOM element count not matching with array to sort\");\r\n    }\r\n\r\n    let speed = options.getSortingSpeed() / 1000;\r\n    for (let i = 0; i < items.length; i++) {\r\n      items[i].style.transition = `transform ${speed}s`;\r\n    }\r\n\r\n    return items;\r\n  };\r\n\r\n  /**\r\n   * Map DOM elements with array to sort based on index\r\n   */\r\n  private mapArrayWithDOMElements = (\r\n    options: SortOptions\r\n  ): ItemElementMap[] => {\r\n    let map: ItemElementMap[] = [];\r\n    let items = this.getItems(options);\r\n    map = this.arrayToSort.map((item: number, index: number) => {\r\n      let newItem: ItemElementMap = {\r\n        value: item,\r\n        element: items[index],\r\n        totalTranlation: 0,\r\n      };\r\n      return newItem;\r\n    });\r\n\r\n    return map;\r\n  };\r\n\r\n  /**\r\n   * sorts array based on the algorithm specified\r\n   */\r\n  public sort = async (algorithm: enums.Algorithms, options: SortOptions) => {\r\n    let engine: ISortEngine;\r\n    let mappedArray = this.mapArrayWithDOMElements(options);\r\n\r\n    switch (algorithm) {\r\n      case enums.Algorithms.BubbleSort:\r\n        engine = new BubbleSortEngine(mappedArray, options);\r\n        break;\r\n      case enums.Algorithms.QuickSort:\r\n        engine = new QuickSortEngine(mappedArray, options);\r\n        break;\r\n      default:\r\n        throw new Error(`Algorithm with id ${algorithm} not yet implemented`);\r\n    }\r\n\r\n    await engine.sort();\r\n  };\r\n}\r\n\r\nexport default SortingEngine;\r\n","import React from \"react\";\r\nimport * as enums from \"../../enums\";\r\nimport settings from \"../../appsettings\";\r\nimport StageControls from \"./stagecontrols\";\r\nimport ItemContainer from \"./itemcontainer\";\r\nimport SortOptions from \"./typings/sortoptions\";\r\nimport SortingEngine from \"../../helpers/sorting/sortingengine\";\r\nimport SortingHelper from \"../../helpers/sorting/sortinghelper\";\r\n\r\ninterface State {\r\n  renderedOn: number;\r\n  sortingInProgress: boolean;\r\n  removeItems: boolean;\r\n}\r\n\r\ninterface Props {}\r\n\r\nclass Stage extends React.Component<Props, State> {\r\n  // array to sort\r\n  private arrayToSort: number[] = [];\r\n\r\n  // original array\r\n  private rawArray: number[] = [];\r\n\r\n  // width of an item in stage\r\n  private itemWidth = 0;\r\n\r\n  // total items to sort\r\n  private itemCount = 0;\r\n\r\n  // sorting speed\r\n  private sortingSpeed = 0;\r\n\r\n  // width of stage\r\n  private stageWidth = 800;\r\n\r\n  // height of stage\r\n  private stageHeight = 400;\r\n\r\n  // sorting algorithm\r\n  private sortingAlgorithm: enums.Algorithms;\r\n\r\n  // flag to hold if reset done after sorting\r\n  private resetDone: boolean;\r\n\r\n  /**\r\n   * constructor of stage\r\n   */\r\n  constructor(props: Props, state: State) {\r\n    super(props, state);\r\n    this.state = {\r\n      renderedOn: 0,\r\n      sortingInProgress: false,\r\n      removeItems: false,\r\n    };\r\n    this.sortingAlgorithm = enums.Algorithms.BubbleSort;\r\n    this.resetDone = true;\r\n    this.setItemWidth();\r\n    this.setSortingSpeed();\r\n    this.generateRandomArray();\r\n  }\r\n\r\n  /**\r\n   * render stage to DOM\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"stage\">\r\n        <StageControls\r\n          selectedAlgorithm={this.sortingAlgorithm}\r\n          startSorting={this.startSorting}\r\n          stopSorting={this.stopSorting}\r\n          resetArray={this.resetArray}\r\n          onItemWidthChange={this.onItemWidthChange}\r\n          onSortingSpeedChange={this.onSortingSpeedChange}\r\n          onAlgorithmSelected={this.onAlgorithmSelected}\r\n          sortingInProgress={this.state.sortingInProgress}\r\n        />\r\n        <p className=\"total\">Total items to sort: {this.arrayToSort.length}</p>\r\n        {!this.state.removeItems ? (\r\n          <ItemContainer\r\n            items={this.arrayToSort}\r\n            maxHeight={this.stageHeight}\r\n            itemWidth={this.itemWidth}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * start array sorting\r\n   */\r\n  private startSorting = (e: React.MouseEvent<HTMLElement>) => {\r\n    if (this.resetDone) {\r\n      try {\r\n        let options = {\r\n          itemWidth: this.itemWidth,\r\n          getSortingSpeed: this.getSortingSpeed,\r\n          continueSorting: this.continueSorting,\r\n        } as SortOptions;\r\n        let sortingEngine = new SortingEngine(this.arrayToSort);\r\n\r\n        this.setState({ sortingInProgress: true }, async () => {\r\n          this.resetDone = false;\r\n          await sortingEngine.sort(this.sortingAlgorithm, options);\r\n          this.setState({ sortingInProgress: false });\r\n        });\r\n      } catch (e) {\r\n        this.setState({ sortingInProgress: false });\r\n        console.error(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * stop array sorting\r\n   */\r\n  private stopSorting = (e: React.MouseEvent<HTMLElement>) => {\r\n    this.setState({ sortingInProgress: false });\r\n  };\r\n\r\n  /**\r\n   * triggered when algorithm selection is changed\r\n   */\r\n  private onAlgorithmSelected = (algorithm: enums.Algorithms) => {\r\n    this.sortingAlgorithm = algorithm;\r\n    this.setState({ renderedOn: Date.now() });\r\n  };\r\n\r\n  /**\r\n   * reset array for sorting\r\n   */\r\n  private resetArray = (e: React.MouseEvent<HTMLElement>) => {\r\n    this.reset();\r\n  };\r\n\r\n  /**\r\n   * get sorting speed\r\n   */\r\n  private getSortingSpeed = (): number => {\r\n    return this.sortingSpeed;\r\n  };\r\n\r\n  /**\r\n   * return true if its oke to continue sorting.\r\n   */\r\n  private continueSorting = (): boolean => {\r\n    return this.state.sortingInProgress;\r\n  };\r\n\r\n  /**\r\n   * reset array\r\n   */\r\n  private reset = () => {\r\n    this.resetDone = true;\r\n    this.generateRandomArray();\r\n    this.setState({ removeItems: true }, () => {\r\n      setTimeout(() => {\r\n        this.setState({ removeItems: false });\r\n      }, 10);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * start array sorting\r\n   */\r\n  private onItemWidthChange = (e: React.ChangeEvent<HTMLElement>) => {\r\n    if (!this.resetDone) {\r\n      this.reset();\r\n    }\r\n    let target: any = e.target;\r\n    this.itemWidth = SortingHelper.getItemWidth(parseInt(target.value));\r\n    this.setItemWidth();\r\n    this.arrayToSort = this.rawArray.slice(0, this.itemCount);\r\n    this.setState({ renderedOn: Date.now() });\r\n  };\r\n\r\n  /**\r\n   * trigger when sorting speed is changed\r\n   */\r\n  private onSortingSpeedChange = (e: React.ChangeEvent<HTMLElement>) => {\r\n    let target: any = e.target;\r\n    let weight = parseInt(target.value);\r\n    this.setSortingSpeed(weight);\r\n  };\r\n\r\n  /**\r\n   * set width of item\r\n   */\r\n  private setItemWidth = () => {\r\n    if (this.itemCount === 0) {\r\n      this.itemWidth = SortingHelper.getItemWidth(settings.itemWidth.default);\r\n    }\r\n    this.itemCount = this.stageWidth / (this.itemWidth + 1);\r\n  };\r\n\r\n  /**\r\n   * generate random array\r\n   */\r\n  private generateRandomArray = () => {\r\n    this.rawArray = SortingHelper.generateRandomArray(400, 1, this.stageHeight);\r\n    this.arrayToSort = [...this.rawArray];\r\n    this.arrayToSort = this.rawArray.slice(0, this.itemCount);\r\n  };\r\n\r\n  /**\r\n   * set sorting speed\r\n   */\r\n  private setSortingSpeed = (index = 0) => {\r\n    this.sortingSpeed = SortingHelper.getSortingSpeed(\r\n      index === 0 ? settings.sortingSpeed.default : index\r\n    );\r\n  };\r\n}\r\n\r\nexport default Stage;\r\n","import React from \"react\";\r\nimport Stage from \"./components/stage/stage\";\r\n\r\nfunction App() {\r\n  return <Stage />;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}