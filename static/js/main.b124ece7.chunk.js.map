{"version":3,"sources":["enums/index.ts","appsettings.js","components/stage/stagecontrols.tsx","components/stage/itemcontainer.tsx","helpers/sortinghelper.ts","components/stage/stage.tsx","App.tsx","index.tsx"],"names":["Algorithms","settings","itemWidth","default","min","max","StageControls","props","itemWidthRangeOptions","getNavItem","text","algorithm","className","classNames","active","selectedAlgorithm","onClick","onAlgorithmSelected","href","data-id","resetArray","type","defaultValue","onChange","onItemWidthChange","enums","BubbleSort","QuickSort","MergeSort","startSorting","stopSorting","ItemContainer","maxHeight","items","map","item","style","marginTop","width","renderItem","SortingHelper","generateRandomArray","length","Array","from","Math","floor","random","getItemWidth","weight","Error","Stage","state","arrayToSort","rawArray","itemCount","stageWidth","stageHeight","sortingAlgorithm","e","console","log","setState","renderedOn","Date","now","target","parseInt","value","setItemWidth","slice","this","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b124ece7.chunk.js","sourcesContent":["/**\r\n * Enums for different algorithms\r\n */\r\nexport enum Algorithms {\r\n  BubbleSort = 1,\r\n  QuickSort = 2,\r\n  MergeSort = 3,\r\n}\r\n","var settings = {\r\n  itemWidth: {\r\n    // default, min and max are index of [2, 4, 5, 10, 20, 40, 50] '\r\n    // which are item width in pixel\r\n    default: 2,\r\n    min: 1,\r\n    max: 7,\r\n  },\r\n};\r\n\r\nexport default settings;\r\n","import React from \"react\";\r\nimport * as enums from \"../../enums\";\r\nimport settings from \"../../appsettings\";\r\nimport { RangeOptions } from \"./typings/rangeoptions\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface Props {\r\n  selectedAlgorithm: enums.Algorithms;\r\n  resetArray: (event: React.MouseEvent<HTMLElement>) => void;\r\n  startSorting: (event: React.MouseEvent<HTMLElement>) => void;\r\n  stopSorting: (event: React.MouseEvent<HTMLElement>) => void;\r\n  onItemWidthChange: (event: React.ChangeEvent<HTMLElement>) => void;\r\n  onAlgorithmSelected: (algorithm: enums.Algorithms) => void;\r\n}\r\n\r\nconst StageControls: React.SFC<Props> = (props) => {\r\n  // options for item width range selector\r\n  const itemWidthRangeOptions: RangeOptions = {\r\n    default: settings.itemWidth.default,\r\n    min: settings.itemWidth.min,\r\n    max: settings.itemWidth.max,\r\n  };\r\n\r\n  // generate nav item\r\n  const getNavItem = (text: string, algorithm: enums.Algorithms) => {\r\n    return (\r\n      <li\r\n        className={classNames({\r\n          active: props.selectedAlgorithm === algorithm,\r\n        })}\r\n      >\r\n        <a\r\n          onClick={() => props.onAlgorithmSelected(algorithm)}\r\n          href=\"#\"\r\n          data-id={algorithm}\r\n        >\r\n          {text}\r\n        </a>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-inverse\">\r\n      <div className=\"container-fluid\">\r\n        <ul className=\"nav navbar-nav\">\r\n          <li>\r\n            <button\r\n              className=\"btn btn-primary navbar-btn right-margin16px\"\r\n              onClick={props.resetArray}\r\n            >\r\n              Reset\r\n            </button>\r\n          </li>\r\n          <li className=\"range\">\r\n            <p>item width</p>\r\n            <input\r\n              type=\"range\"\r\n              min={itemWidthRangeOptions.min}\r\n              max={itemWidthRangeOptions.max}\r\n              defaultValue={itemWidthRangeOptions.default}\r\n              onChange={props.onItemWidthChange}\r\n            />\r\n          </li>\r\n        </ul>\r\n        <ul className=\"nav navbar-nav\">\r\n          {getNavItem(\"Bubble sort\", enums.Algorithms.BubbleSort)}\r\n          {getNavItem(\"Quick sort\", enums.Algorithms.QuickSort)}\r\n          {getNavItem(\"Merge sort\", enums.Algorithms.MergeSort)}\r\n        </ul>\r\n        <ul className=\"nav navbar-nav\">\r\n          <li>\r\n            <button\r\n              onClick={props.startSorting}\r\n              className=\"btn btn-success navbar-btn right-margin16px left-margin16px\"\r\n            >\r\n              Start\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button\r\n              onClick={props.stopSorting}\r\n              className=\"btn btn-danger navbar-btn right-margin16px\"\r\n            >\r\n              Stop\r\n            </button>\r\n          </li>\r\n          <li className=\"range\">\r\n            <p>Sorting speed</p>\r\n            <input type=\"range\" />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default StageControls;\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  items: number[];\r\n  maxHeight: number;\r\n  itemWidth: number;\r\n}\r\n\r\nconst ItemContainer: React.SFC<Props> = (props) => {\r\n  const { maxHeight, items, itemWidth } = props;\r\n\r\n  /** render each sortable item */\r\n  const renderItem = (item: number) => {\r\n    let style: React.CSSProperties = {\r\n      marginTop: maxHeight - item,\r\n      width: itemWidth,\r\n    };\r\n    return <div style={style}></div>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"item-container\">\r\n      {items.map((item: number) => {\r\n        return renderItem(item);\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemContainer;\r\n","class SortingHelper {\r\n  /**\r\n   * generate random array based on the length\r\n   */\r\n  public static generateRandomArray = (length: number, max: number) => {\r\n    return Array.from(\r\n      {\r\n        length: length,\r\n      },\r\n      () => Math.floor(Math.random() * max)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * return item width in pixel\r\n   */\r\n  public static getItemWidth = (weight: number): number => {\r\n    // width of each item will be the value + 1px margin\r\n    // example if width is 3 then item width will be 49 + 1 = 4\r\n    let itemWidth = [1, 3, 4, 9, 19, 39, 49];\r\n    if (weight > itemWidth.length) {\r\n      throw Error(\"Weight not valid for item width\");\r\n    }\r\n\r\n    return itemWidth[weight - 1];\r\n  };\r\n}\r\n\r\nexport default SortingHelper;\r\n","import React from \"react\";\r\nimport * as enums from \"../../enums\";\r\nimport settings from \"../../appsettings\";\r\nimport StageControls from \"./stagecontrols\";\r\nimport ItemContainer from \"./itemcontainer\";\r\nimport SortingHelper from \"../../helpers/sortinghelper\";\r\n\r\ninterface State {\r\n  renderedOn: number;\r\n}\r\n\r\ninterface Props {}\r\n\r\nclass Stage extends React.Component<Props, State> {\r\n  // array to sort\r\n  private arrayToSort: number[] = [];\r\n\r\n  // original array\r\n  private rawArray: number[] = [];\r\n\r\n  // width of an item in stage\r\n  private itemWidth = 0;\r\n\r\n  // total items to sort\r\n  private itemCount = 0;\r\n\r\n  // width of stage\r\n  private stageWidth = 800;\r\n\r\n  // height of stage\r\n  private stageHeight = 400;\r\n\r\n  // sorting algorithm\r\n  private sortingAlgorithm: enums.Algorithms;\r\n\r\n  /**\r\n   * constructor of stage\r\n   */\r\n  constructor(props: Props, state: State) {\r\n    super(props, state);\r\n    this.sortingAlgorithm = enums.Algorithms.BubbleSort;\r\n    this.setItemWidth();\r\n    this.generateRandomArray();\r\n  }\r\n\r\n  /**\r\n   * render stage to DOM\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"stage\">\r\n        <StageControls\r\n          selectedAlgorithm={this.sortingAlgorithm}\r\n          startSorting={this.startSorting}\r\n          stopSorting={this.stopSorting}\r\n          resetArray={this.resetArray}\r\n          onItemWidthChange={this.onItemWidthChange}\r\n          onAlgorithmSelected={this.onAlgorithmSelected}\r\n        />\r\n        <ItemContainer\r\n          items={this.arrayToSort}\r\n          maxHeight={this.stageHeight}\r\n          itemWidth={this.itemWidth}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * start array sorting\r\n   */\r\n  private startSorting = (e: React.MouseEvent<HTMLElement>) => {\r\n    console.log(\"start button clicked !!!\");\r\n  };\r\n\r\n  /**\r\n   * stop array sorting\r\n   */\r\n  private stopSorting = (e: React.MouseEvent<HTMLElement>) => {\r\n    console.log(\"stop button clicked !!!\");\r\n  };\r\n\r\n  /**\r\n   * triggered when algorithm selection is changed\r\n   */\r\n  private onAlgorithmSelected = (algorithm: enums.Algorithms) => {\r\n    this.sortingAlgorithm = algorithm;\r\n    this.setState({ renderedOn: Date.now() });\r\n  };\r\n\r\n  /**\r\n   * reset array for sorting\r\n   */\r\n  private resetArray = (e: React.MouseEvent<HTMLElement>) => {\r\n    this.generateRandomArray();\r\n    this.setState({ renderedOn: Date.now() });\r\n  };\r\n\r\n  /**\r\n   * start array sorting\r\n   */\r\n  private onItemWidthChange = (e: React.ChangeEvent<HTMLElement>) => {\r\n    let target: any = e.target;\r\n    this.itemWidth = SortingHelper.getItemWidth(parseInt(target.value));\r\n    this.setItemWidth();\r\n    this.arrayToSort = this.rawArray.slice(0, this.itemCount);\r\n    this.setState({ renderedOn: Date.now() });\r\n  };\r\n\r\n  /**\r\n   * set width of item\r\n   */\r\n  private setItemWidth = () => {\r\n    if (this.itemCount === 0) {\r\n      this.itemWidth = SortingHelper.getItemWidth(settings.itemWidth.default);\r\n    }\r\n    this.itemCount = this.stageWidth / (this.itemWidth + 1);\r\n  };\r\n\r\n  /**\r\n   * generate random array\r\n   */\r\n  private generateRandomArray = () => {\r\n    this.rawArray = SortingHelper.generateRandomArray(400, this.stageHeight);\r\n    this.arrayToSort = [...this.rawArray];\r\n    this.arrayToSort = this.rawArray.slice(0, this.itemCount);\r\n  };\r\n}\r\n\r\nexport default Stage;\r\n","import React from \"react\";\r\nimport Stage from \"./components/stage/stage\";\r\n\r\nfunction App() {\r\n  return <Stage />;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}